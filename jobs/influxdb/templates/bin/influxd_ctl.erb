#! /usr/bin/env bash

set -e -x

### BEGIN INIT INFO
# Provides:          influxd
# Required-Start:    $all
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start influxd at boot time
### END INIT INFO

# this init script supports three different variations:
#  1. New lsb that define start-stop-daemon
#  2. Old lsb that don't have start-stop-daemon but define, log, pidofproc and killproc
#  3. Centos installations without lsb-core installed
#
# In the third case we have to define our own functions which are very dumb
# and expect the args to be positioned correctly.

SCRIPT=$(basename $0)
mkdir -p /var/vcap/sys/log/monit

exec 1>> /var/vcap/sys/log/monit/$SCRIPT.out.log
exec 2>> /var/vcap/sys/log/monit/$SCRIPT.err.log

if [ -r /lib/lsb/init-functions ]; then
    source /lib/lsb/init-functions
fi

OPEN_FILE_LIMIT=65536

function pidofproc() {
    if [ $# -ne 3 ]; then
        echo "Expected three arguments, e.g. $0 -p pidfile daemon-name"
    fi

    pid=`pgrep -f $3`
    local pidfile=`cat $2`

    if [ "x$pidfile" == "x" ]; then
        return 1
    fi

    if [ "x$pid" != "x" -a "$pidfile" == "$pid" ]; then
        return 0
    fi

    return 1
}

function killproc() {
    if [ $# -ne 3 ]; then
        echo "Expected three arguments, e.g. $0 -p pidfile signal"
    fi

    pid=`cat $2`

    kill -s $3 $pid
}

function log_failure_msg() {
    echo "$@" "[ FAILED ]"
}

function log_success_msg() {
    echo "$@" "[ OK ]"
}

# Process name ( For display )
name=influxd

# Daemon name, where is the actual executable
#daemon=/var/vcap/packages/influxdb/influxd
daemon=/var/vcap/packages/influxdb/influxdb-1.8.10-1/usr/bin/influxd

# Boostrapper where is the actual executable
bootstrapper=/var/vcap/packages/bootstrapper/bootstrapper

# pid file for the daemon
pidfile=/var/vcap/sys/run/influxdb/influxd.pid

# Configuration file
config=/var/vcap/jobs/influxdb/config/influxdb.conf

mkdir -p /var/vcap/store/influxdb
mkdir -p /var/vcap/sys/log/influxdb

chown -R vcap:vcap /var/vcap/sys/log/influxdb
chown -R vcap:vcap /var/vcap/store/influxdb

# If the daemon is not there, then exit.
[ -x $daemon ] || exit 5

case $1 in
    start)
        # Checked the PID file exists and check the actual status of process
        if [ -e $pidfile ]; then
            pidofproc -p $pidfile $daemon > /dev/null 2>&1 && status="0" || status="$?"
            # If the status is SUCCESS then don't need to start again.
            if [ "x$status" = "x0" ]; then
                log_failure_msg "$name process is running"
                exit 1 # Exit
            fi
        fi

        # Bump the file limits, before launching the daemon. These will carry over to
        # launched processes.
        ulimit -n $OPEN_FILE_LIMIT
        if [ $? -ne 0 ]; then
            log_failure_msg "set open file limit to $OPEN_FILE_LIMIT"
        fi

        log_success_msg "Starting the process" "$name"
        if which start-stop-daemon > /dev/null 2>&1; then
            start-stop-daemon --chuid vcap:vcap --start --quiet --pidfile $pidfile --exec $daemon -- -pidfile $pidfile -config $config &
        else
            nohup $daemon run -config $config -pidfile $pidfile &
        fi

        subproc=$!

        log_success_msg "$name process was started"

        until nc -w 1 127.0.0.1 <%= p('influxdb.port') %> </dev/null; do
          echo "$(date): waiting for influxd..."
          sleep 1

          if ! kill -0 $subproc; then
            echo "$(date): influxd exited; giving up"
            exit 1
          fi
        done

 	#$bootstrapper \
             #-influxUrl $protocol://localhost:8086 \
             #-user <%= p('influxdb.user') %> \
             #-password <%= p('influxdb.password') %> \
             #-database container_metric_db \
             #-retention <%= p('influxdb.interval') %> \
             #-replication <%= p('influxdb.replication') %>

        #if [ $? -ne 0 ]; then
          #log_failure_msg "failed to boostrap db"
          #killproc -p $pidfile SIGTERM && /bin/rm -rf $pidfile
          #exit 1
        #fi

        #log_success_msg "succesfully boostrapped db"

        ;;

    stop)
        # Stop the daemon.
        if [ -e $pidfile ]; then
            pidofproc -p $pidfile $daemon > /dev/null 2>&1 && status="0" || status="$?"
            if [ "$status" = 0 ]; then
                if killproc -p $pidfile SIGTERM && /bin/rm -rf $pidfile; then
                    log_success_msg "$name process was stopped"
                else
                    log_failure_msg "$name failed to stop service"
                fi
            fi
        else
            log_failure_msg "$name process is not running"
        fi
        ;;

    restart)
        # Restart the daemon.
        $0 stop && sleep 2 && $0 start
        ;;

    status)
        # Check the status of the process.
        if [ -e $pidfile ]; then
            if pidofproc -p $pidfile $daemon > /dev/null; then
                log_success_msg "$name Process is running"
                exit 0
            else
                log_failure_msg "$name Process is not running"
                exit 1
            fi
        else
            log_failure_msg "$name Process is not running"
            exit 3
        fi
        ;;

    *)
        # For invalid arguments, print the usage message.
        echo "Usage: $0 {start|stop|restart|status}"
        exit 2
        ;;
esac
